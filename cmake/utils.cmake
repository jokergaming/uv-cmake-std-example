macro(config_comp _COMP _REF)
    string(TOUPPER ${_COMP} _COMP_UPPER)
    if(${_REF})
        message("Configuring REF: ${_COMP}")
        set(${_COMP_UPPER}_OUT_ROOT ${UV_REF_BUILD}/${_COMP})
    else()
        message("Configuring SRC: ${_COMP}")
        set(${_COMP_UPPER}_OUT_ROOT ${CMAKE_INSTALL_PREFIX}/${_COMP})
        set(${_COMP_UPPER}_SRC_ROOT ${CMAKE_SOURCE_DIR}/${_COMP})
        set(${_COMP_UPPER}_BUILD_ROOT ${CMAKE_BINARY_DIR}/${_COMP})
    endif()

    foreach(_DIR lib bin include src)
        string(TOUPPER ${_DIR} _DIR_UPPER)
        set(${_COMP_UPPER}_OUT_${_DIR_UPPER}_DIR ${${_COMP_UPPER}_OUT_ROOT}/${_DIR})
    endforeach()

    cmake_print_variables(${_COMP_UPPER}_OUT_ROOT)
    cmake_print_variables(${_COMP_UPPER}_OUT_INCLUDE_DIR)
endmacro()

macro(export_deps _COMP)
    string(TOUPPER ${_COMP} _COMP_UPPER)

    file(GLOB _LIBS CONFIGURE_DEPENDS ${${_COMP_UPPER}_OUT_LIB_DIR}/*)
    foreach(_LIB ${_LIBS})
        get_filename_component(_LIB_NAME "${_LIB}" NAME_WE)
        STRING(REGEX REPLACE "^lib" "" _LIB_NAME "${_LIB_NAME}")
        string(TOUPPER ${_LIB_NAME} _LIB_NAME_UPPER)
        set(DEPENDED_LIB_${_LIB_NAME_UPPER} ${_LIB})
        cmake_print_variables(DEPENDED_LIB_${_LIB_NAME_UPPER})
    endforeach()

    file(GLOB _BINS CONFIGURE_DEPENDS ${${_COMP_UPPER}_OUT_BIN_DIR}/*)
    foreach(_BIN ${_BINS})
        get_filename_component(_BIN_NAME "${_BIN}" NAME)
        string(TOUPPER ${_BIN_NAME} _BIN_NAME_UPPER)
        set(DEPENDED_LIB_${_BIN_NAME_UPPER} ${_BIN})
        cmake_print_variables(DEPENDED_LIB_${_BIN_NAME_UPPER})
    endforeach()
endmacro()

macro(devops_basic_setup)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)

    if(PROJECT_NAME STREQUAL PRODUCT_ROOT)
        set(COMP_NAME ${PROJECT_NAME}_image)
    else()
        set(COMP_NAME ${PROJECT_NAME})
    endif()

    foreach(_COMP ${COMP_DEPS})
        string(TOUPPER ${_COMP} _COMP_UPPER)
        include_directories(
            ${${_COMP_UPPER}_OUT_INCLUDE_DIR}
        )
        if(_COMP STREQUAL COMP_NAME)
            break()
        endif()
    endforeach()

    if(INSTALL_USE_RPATH)
        cmake_print_variables(INSTALL_USE_RPATH)
        add_link_options(
            -Wl,--disable-new-dtags
        )
    endif()
endmacro()

macro(devops_post_setup)
    foreach(_LIB ${EXPORT_LIB_LIST})
        if(TARGET ${_LIB})
            string(TOUPPER ${_LIB} _LIB_UPPER)
            ## Avoid indirect deps
            set(DEPENDED_LIB_${_LIB_UPPER} $<TARGET_FILE:${_LIB}>)
            set(DEPENDED_LIB_${_LIB_UPPER} $<TARGET_FILE:${_LIB}> PARENT_SCOPE)
            cmake_print_variables(DEPENDED_LIB_${_LIB_UPPER})
            install(TARGETS ${_LIB} DESTINATION ${COMP_NAME}/lib)
        else()
            message(FATAL_ERROR "${_LIB} is NOT a target")
        endif()
    endforeach()

    foreach(_BIN ${EXPORT_BIN_LIST})
        if(TARGET ${_BIN})
            string(TOUPPER ${_BIN} _BIN_UPPER)
            ## Avoid indirect dep
            set(DEPENDED_BIN_${_BIN_UPPER} $<TARGET_FILE:${_BIN}>)
            set(DEPENDED_BIN_${_BIN_UPPER} $<TARGET_FILE:${_BIN}> PARENT_SCOPE)
            cmake_print_variables(DEPENDED_BIN_${_BIN_UPPER})
            install(TARGETS ${_BIN} DESTINATION ${COMP_NAME}/bin)
        else()
            message(FATAL_ERROR "${_BIN} is NOT a target")
        endif()
    endforeach()

    foreach(_CODEGEN ${CODEGEN_LIST})
        if(TARGET ${_CODEGEN})
            add_dependencies(${CODEGEN_TARGET} ${_CODEGEN})
            message("-- Add ${_CODEGEN} into ${CODEGEN_TARGET}")
        else()
            message(FATAL_ERROR "${_CODEGEN} is NOT a target")
        endif()
    endforeach()
endmacro()
